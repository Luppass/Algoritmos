INFORME PRÁCTICA 3 - ALGORITMOS
================================

AUTORES

Pablo Longueira Failde : pablo.longueira.failde@udc.es

Santiago Julio Iglesias Portela : santiago.iglesias4@udc.es

Andrea Lama Muiño : a.lama1@udc.es

Grupo 4.1
================================

CARACTERÍSTICAS DEL ORDENADOR
================================

    Dell XPS 9570 2019
    Intel® Core™ i7-8750H CPU @ 2.20GHz × 12 
    16 GB RAM
    Ubuntu 20.04 LTS Focal Fossa

INTRODUCCIÓN
================================

En esta práctica hemos implementado el algoritmo de ordenación rápida o quicksort para vectores de distintos tamaños N entre 500 y 32000 inicializados ascendentemente,descendentemente y aleatoriamente,además este proceso lo repetimos para cada umbral propuesto siendo estos 1,10 y 100.Una vez hallados los tiempos de ejecución del algoritmo para cada una de las inicializaciones hallamos empíricamente la cota ajustada en cada caso .Previamente comprobamos que el algoritmo está bien implementado con un test probando dos tamaños distintos para los vectores con cada una de las tres inicializaciones planteadas previamente.

TESTS
================================
	TEST
Inicialización aleatoria
[13 22 11 17 1 1 12 16 1 7 2 3 0 17 25 14 22 10 10 24 7 8 3 3 16 ]
Ordenado?: 0 
Ordenamos[0 1 1 1 2 3 3 3 7 7 8 10 10 11 12 13 14 16 16 17 17 22 22 24 25 ]
Ordenado?: 1 

[15 18 12 14 20 10 20 2 2 15 17 19 7 8 8 9 11 11 1 10 ]
Ordenado?: 0 
Ordenamos[1 2 2 7 8 8 9 10 10 11 11 12 14 15 15 17 18 19 20 20 ]
Ordenado?: 1 

Inicialización descendente
[24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 ]
Ordenado?: 0 
Ordenamos[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ]
Ordenado?: 1 

[19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 ]
Ordenado?: 0 
Ordenamos[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ]
Ordenado?: 1 

Inicialización ascendente
[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ]
ordenado?:1

[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ]
ordenado?:1

ANÁLISIS DE LOS ALGORITMOS
================================
	UMBRAL= 1

Inicialización descendente

       n             t(n)       	t(n)/n^0.9    	t(n)/n^1.07      t(n)/n^1.4

(*)  2000         97.01200         0.103729         0.028492         0.002319
(*)  4000        205.52600         0.117764         0.028752         0.001862
(*)  8000        426.44600         0.130943         0.028416         0.001464
    16000        845.00000         0.139043         0.026819         0.001099
    32000       1836.00000         0.161897         0.027756         0.000905
    64000       3888.00000         0.183723         0.027997         0.000726
   128000       8326.00000         0.210837         0.028558         0.000589

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.0026819,0.0028752], y tiende aproximadamente 0.002775.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. 

Inicialización ascendente

       n             t(n)       	t(n)/n^0.9    	t(n)/n^1.07       t(n)/n^1.4
(*)  2000         92.72600         0.099146         0.027233         0.002217
(*)  4000        192.19100         0.110123         0.026886         0.001741
(*)  8000        402.61700         0.123626         0.026828         0.001382
    16000        828.00000         0.136246         0.026280         0.001077
    32000       1745.00000         0.153872         0.026381         0.000860
    64000       3827.00000         0.180841         0.027558         0.000715
   128000       7599.00000         0.192428         0.026064         0.000538

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.026064,0.027558], y tiende aproximadamente 0.02750.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente.La cota ajustada la hallamos con t(n)/n^1.07.

Inicialización aleatoria

       n             t(n)       	t(n)/n^0.9    	t(n)/n*log(n)       t(n)/n^1.4

(*)  2000        167.04800         0.178614         0.010989         0.003994
(*)  4000        351.33700         0.201312         0.010590         0.003183
     8000        727.00000         0.223230         0.010112         0.002496
    16000       1591.00000         0.261796         0.010272         0.002070
    32000       3279.00000         0.289139         0.009878         0.001616
    64000       6878.00000         0.325013         0.009711         0.001285
   128000      15289.00000         0.387160         0.010157         0.001082

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.009878,0.0010989], y tiende aproximadamente 0.001050.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. O(n*log n) 


_TIEMPOS MEDIDOS EN MICROSEGUNDOS (us)_

ANÁLISIS DE LOS ALGORITMOS
================================
	UMBRAL = 10

Inicialización descendente
       n             t(n)       t(n)/n^0.9    t(n)/n*log(n)       t(n)/n^1.4

(*)  2000         66.66600         0.071282         0.004385         0.001594
(*)  4000        144.46100         0.082775         0.004354         0.001309
(*)  8000        303.26400         0.093119         0.004218         0.001041
    16000        614.00000         0.101032         0.003964         0.000799
    32000       1435.00000         0.126537         0.004323         0.000707
    64000       2852.00000         0.134768         0.004027         0.000533
   128000       6527.00000         0.165282         0.004336         0.000462
   
La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.003964,0.004385], y tiende aproximadamente 0.004350.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. O(n*log n) 

Inicialización ascendente
       n             t(n)       	t(n)/n^0.9    	t(n)/n*log(n)       t(n)/n^1.4
       
(*)  2000         59.07100         0.063161         0.003886         0.001412
(*)  4000        128.98600         0.073908         0.003888         0.001169
(*)  8000        279.28400         0.085756         0.003884         0.000959
    16000        556.00000         0.091489         0.003590         0.000723
    32000       1253.00000         0.110488         0.003775         0.000618
    64000       2599.00000         0.122813         0.003670         0.000485
   128000       5807.00000         0.147049         0.003858         0.000411

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.003590,0.003888], y tiende aproximadamente 0.003750.La cota sobreestimada tiende a cero.La complejidad del algoritmo de búsqueda es lineal-logaritmico, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. 

Inicialización aleatoria
       n             t(n)       	t(n)/n^0.9    	t(n)/n*log(n)       t(n)/n^1.4

(*)  2000        141.63000         0.151436         0.009317         0.003386
(*)  4000        305.80700         0.175224         0.009218         0.002771
     8000        714.00000         0.219239         0.009931         0.002451
    16000       1400.00000         0.230367         0.009039         0.001821
    32000       3041.00000         0.268152         0.009161         0.001499
    64000       6384.00000         0.301669         0.009014         0.001192
   128000      14237.00000         0.360520         0.009458         0.001008

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.009039,0.009458], y tiende aproximadamente 0.009310.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. O(n*log n)


_TIEMPOS MEDIDOS EN MICROSEGUNDOS (us)_

ANÁLISIS DE LOS ALGORITMOS
================================
	UMBRAL = 100
	
Inicialización descendente
       n             t(n)       t(n)/n^0.9    t(n)/n*log(n)       t(n)/n^1.4

(*)  2000         41.72400         0.044613         0.002745         0.000998
(*)  4000         88.57800         0.050754         0.002670         0.000802
(*)  8000        197.50800         0.060646         0.002747         0.000678
(*) 16000        426.08000         0.070111         0.002751         0.000554
    32000        862.00000         0.076010         0.002597         0.000425
    64000       1972.00000         0.093185         0.002784         0.000368
   128000       4339.00000         0.109875         0.002883         0.000307

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.002670,0.002883], y tiende aproximadamente 0.002750.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. O(n*log n) 


Inicialización ascendente
      
       n             t(n)       t(n)/n^0.9    	t(n)/n^1.15       t(n)/n^1.4
(*)  2000         34.52100         0.036911         0.005519         0.000825
(*)  4000         78.28900         0.044859         0.005641         0.000709
(*)  8000        175.36200         0.053846         0.005694         0.000602
(*) 16000        393.71400         0.064785         0.005760         0.000512
    32000        811.00000         0.071513         0.005347         0.000400
    64000       1761.00000         0.083214         0.005232         0.000329
   128000       3965.00000         0.100405         0.005308         0.000281

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.005232,0.005760], y tiende aproximadamente 0.005650.La cota sobreestimada tiende a cero.La complejidad del algoritmo de búsqueda es lineal-logaritmico, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente. 


Inicialización aleatoria
       n             t(n)       	t(n)/n^0.9    	t(n)/n*log(n)       t(n)/n^1.4

(*)  2000        159.91000         0.170981         0.010519         0.003823
(*)  4000        349.37900         0.200190         0.010531         0.003165
     8000        776.00000         0.238276         0.010793         0.002664
    16000       1605.00000         0.264099         0.010362         0.002088
    32000       3324.00000         0.293107         0.010014         0.001639
    64000       7208.00000         0.340606         0.010177         0.001346
   128000      15003.00000         0.379917         0.009967         0.001062

La cota subestimada tiende a infinito. La cota ajustada, varía entre [0.010793,0.009967], y tiende aproximadamente 0.01025.La cota sobreestimada tiende a cero.La complejidad del algoritmo obtenida empiricamente para esta inicializacion es lineal-logaritmica, las cotas subestimadas y sobreestimadas son estudiadas mediante t(n)/n^0.9 y t(n)/(n)^1.4 respectivamente,como se demuestra en las cabeceras de la tabla. O(n*log n)


_TIEMPOS MEDIDOS EN MICROSEGUNDOS (us)_

OBSERVACIONES
================================
	
	-Tiempo medido en microsegundos.
	-Las cabeceras de las tablas representan: n(nº elementos del vector), t(n) (tiempo de ejecución),
	 cotas subestimada, ajustada y sobreestimada respectivamente.
	-Los asteriscos mostrados en la tabla de tiempos como (*) 
	 indicarían cuando el algoritmo en esa iteración no supera un tiempo de 
	 ejecución de 500 microsegundos.En este estudio empírico de las 	
	 complejidades no se han encontrado estos casos.  
	-No se han encontrado anomalías notables en ninguno de los casos estudiados.
	-Para mayor precisión se les aplica a ambos algoritmos una progresión geométrica de razón 2^n desde
	 2000 a 128000.
	-En los casos de: umbral 1: cota ajustada (ascendente y descendente) , umbral 100: cota ajustada(ascendente) se ha complicado el estudio empírico de la cota ajustada y no coincidía con el valor demostrado en los demás casos sino que tendía a estabilizarse entorno al valor t(n)/n^1.07. Por ello, al ser casos aislados decidimos no modificar las cabeceras de las tablas, siendo estos casos observados y apuntados como observación a modo de evitar malentendidos.

CONCLUSIÓN
================================
Una vez estudiadas la ordenación de tres inicializaciones distintas y tres umbrales del algoritmo diferentes podemos resumir el estudio con que para casi todas las cotas ajustadas la complejidad ha sido la misma salvando los tres casos documentados en las observaciones.
En cuanto a los tiempos de ejecución de los algoritmos podriamos ordenarlos de mayor a menor eficiencia como(umbral-inicialización):
100-ascendente -> 100-descendente -> 10-ascendente -> 10-descendente -> 1-ascendente -> 1-descendente -> 10-aleatoria -> 100-aleatoria ->1-aleatoria. Los tiempos de las ejecuciones con umbrales mayores son más eficientes que las del umbral 1 porque recurren al algoritmo de ordenación por inserción, el cuál implica que cuando se aplique a un array,consume menos tiempo que usar el algoritmo de ordenación rápida para conjuntos relativamente pequeños(10 o 100 al ser estos nuestros valores umbral). 
Después de realizar el estudio y ordenar según eficiencia las distintas inicializaciones con su umbral correspondiente podemos concluir que este algoritmo tiene una complejidad O(n*log n) en el caso medio.
Se ha ejecutado 3 veces cada caso para evitar posibles anomalías. 



